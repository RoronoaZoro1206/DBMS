# Student ID Validation & Account Registration System - Prompt Variations
# Repository: RoronoaZoro1206/DBMS
# Generated: 2025-10-20 04:04:22 UTC
# For use with VS Code Copilot AI

================================================================================
RECOMMENDED PROMPT (VERSION 4 - COMPREHENSIVE)
================================================================================
This is the recommended version as it provides the most complete implementation
covering both student ID validation AND flexible account registration with role-based
verification codes. It balances security, usability, and administrative control.
================================================================================

## Prompt Version 4: Comprehensive Student Validation + Flexible Account Registration

### Overview
Implement a dual-purpose authentication system for a university helpdesk that:
1. Validates student IDs against an administration database before allowing ticket submission
2. Provides flexible account creation: either admin-created OR self-registration with role-based verification

### Core Requirements

#### Part A: Student ID Validation (Ticket Submission)
**Context**: Reference #file:helpdesk.py and #file:Phase-2-RBAC.sql

When any user (student, support, or admin) submits a helpdesk ticket:
- The system MUST verify the student_id exists in the `students` table
- The `students` table is the authoritative source (maintained by administrators)
- Only valid, enrolled student IDs can have tickets created for them
- The student_id is used for validation only; not stored redundantly

**Implementation**:
```python
# In /submit_ticket route
cur.execute("SELECT id FROM students WHERE id = %s", (student_id,))
student_exists = cur.fetchone()

if not student_exists:
    return render_template_string(html_template, 
        ticket_message="Student ID not found. Please verify your ID with administration.", 
        results=None)
```

**Database Constraint** (ensure exists):
```sql
ALTER TABLE tickets 
ADD CONSTRAINT fk_tickets_student 
FOREIGN KEY (student_id) REFERENCES students(id);
```

#### Part B: Flexible Account Registration System

**Two Account Creation Methods**:

**Method 1: Admin-Created Accounts**
- Admins can create accounts for any role (admin, support, student) via an admin panel
- No verification code needed when admin creates accounts
- Admin directly assigns roles during creation

**Method 2: Self-Registration**
- Users can register their own accounts via a public registration page
- Registration form includes: username, password, email, role selection
- Role-based verification system:
  - **Student role**: No verification code needed (default/open registration)
  - **Support role**: Requires correct support verification code
  - **Admin role**: Requires correct admin verification code

**Verification Code System**:
```sql
-- Add to Phase-2-RBAC.sql
CREATE TABLE IF NOT EXISTS role_verification_codes (
    id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE,
    verification_code VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert initial codes (change these in production!)
INSERT INTO role_verification_codes (role_name, verification_code) VALUES
    ('admin_role', 'ADMIN-SEC-2025'),
    ('support_role', 'SUPPORT-SEC-2025')
ON CONFLICT (role_name) DO NOTHING;

COMMENT ON TABLE role_verification_codes IS 
'Stores verification codes required for self-registration of privileged roles';
```

**Registration Route Implementation**:
```python
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'GET':
        # Show registration form
        return render_template_string(registration_template)
    
    # POST: Process registration
    username = request.form.get('username', '').strip()
    password = request.form.get('password', '')
    email = request.form.get('email', '').strip()
    role = request.form.get('role', 'student_role').strip()
    verification_code = request.form.get('verification_code', '').strip()
    
    # Validate inputs
    if not username or not password or not email:
        return render_template_string(registration_template, 
            error="All fields are required.")
    
    # Normalize role
    role = normalize_role(role)
    if not role:
        return render_template_string(registration_template, 
            error="Invalid role selected.")
    
    conn = get_db_connection()
    if not conn:
        return render_template_string(registration_template, 
            error="Service temporarily unavailable.")
    
    try:
        cur = conn.cursor()
        
        # Check if privileged role requires verification
        if role in ('admin_role', 'support_role'):
            cur.execute(
                "SELECT verification_code FROM role_verification_codes WHERE role_name = %s",
                (role,)
            )
            code_row = cur.fetchone()
            
            if not code_row:
                return render_template_string(registration_template, 
                    error="Role verification system error.")
            
            if verification_code != code_row[0]:
                return render_template_string(registration_template, 
                    error="Invalid verification code for selected role.")
        
        # Check username availability
        cur.execute("SELECT id FROM staff_users WHERE username = %s", (username,))
        if cur.fetchone():
            return render_template_string(registration_template, 
                error="Username already exists.")
        
        # Create account
        cur.execute(
            """INSERT INTO staff_users (username, password_hash, role, email) 
               VALUES (%s, crypt(%s, gen_salt('bf')), %s, %s)""",
            (username, password, role, email)
        )
        
        conn.commit()
        cur.close()
        
        # Redirect to login with success message
        return redirect(url_for('index') + '?registered=success')
        
    except psycopg2.IntegrityError:
        conn.rollback()
        return render_template_string(registration_template, 
            error="Registration failed. Username or email may already exist.")
    except Exception as e:
        conn.rollback()
        print(f"Registration error: {e}")
        return render_template_string(registration_template, 
            error="An error occurred during registration.")
    finally:
        if conn:
            conn.close()
```

**Registration Form Template**:
```html
registration_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - University Helpdesk</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        function toggleVerificationCode() {
            const role = document.getElementById('role').value;
            const codeField = document.getElementById('verification_code_field');
            if (role === 'admin_role' || role === 'support_role') {
                codeField.style.display = 'block';
            } else {
                codeField.style.display = 'none';
            }
        }
    </script>
</head>
<body class="bg-gray-50 font-sans text-gray-800">
    <div class="max-w-md mx-auto p-6 mt-10">
        <header class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-900">Create Account</h1>
            <p class="text-gray-600 mt-2">University Helpdesk System</p>
        </header>
        
        <section class="bg-white rounded-2xl shadow-md p-6">
            <form method="post" class="space-y-4" autocomplete="off">
                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                
                <div>
                    <label class="block text-sm font-medium mb-1">Username</label>
                    <input type="text" name="username" required autocomplete="off"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-1">Email</label>
                    <input type="email" name="email" required autocomplete="off"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-1">Password</label>
                    <input type="password" name="password" required autocomplete="off"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-1">Role</label>
                    <select id="role" name="role" onchange="toggleVerificationCode()" required
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                        <option value="student_role">Student</option>
                        <option value="support_role">Support Staff</option>
                        <option value="admin_role">Administrator</option>
                    </select>
                </div>
                
                <div id="verification_code_field" style="display: none;">
                    <label class="block text-sm font-medium mb-1">Verification Code</label>
                    <input type="text" name="verification_code" autocomplete="off"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        placeholder="Required for Admin/Support roles">
                    <p class="text-xs text-gray-500 mt-1">Contact administration for the verification code</p>
                </div>
                
                {% if error %}
                    <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded">
                        {{ error }}
                    </div>
                {% endif %}
                
                <button type="submit"
                    class="w-full bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700 transition">
                    Create Account
                </button>
                
                <p class="text-center text-sm text-gray-600">
                    Already have an account? 
                    <a href="{{ url_for('index') }}" class="text-blue-600 underline">Sign In</a>
                </p>
            </form>
        </section>
    </div>
</body>
</html>
"""
```

**Admin Panel for Account Creation**:
```python
@app.route('/admin/create_account', methods=['GET', 'POST'])
@login_required
def admin_create_account():
    if session.get('role') != 'admin_role':
        return render_template_string(html_template, 
            access_message="Access denied: admin only.")
    
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        email = request.form.get('email', '').strip()
        role = normalize_role(request.form.get('role', '').strip())
        
        # Validation and creation logic (no verification code needed)
        # ... implement similar to self-registration but skip code verification
        
    # Return admin account creation form
    return render_template_string(admin_create_account_template)
```

### Security Considerations

1. **Verification Codes**:
   - Store codes securely (consider hashing in production)
   - Rotate codes periodically
   - Limit registration attempts to prevent brute force
   - Log all registration attempts with verification failures

2. **Student ID Validation**:
   - Use parameterized queries (already implemented)
   - Generic error messages to prevent enumeration
   - Log validation failures for monitoring

3. **RBAC Integration**:
   - Ensure newly created accounts inherit proper role privileges
   - Grant appropriate database roles during account creation
   - Verify REFERENCES permission on students(id) for student_role

4. **Rate Limiting**:
   - Apply rate limiting to registration endpoint
   - Apply rate limiting to ticket submission

### Database Migration Steps

```sql
-- Step 1: Add verification codes table
CREATE TABLE IF NOT EXISTS role_verification_codes (
    id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE,
    verification_code VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Step 2: Insert initial codes
INSERT INTO role_verification_codes (role_name, verification_code) VALUES
    ('admin_role', 'CHANGE-THIS-ADMIN-CODE-2025'),
    ('support_role', 'CHANGE-THIS-SUPPORT-CODE-2025')
ON CONFLICT (role_name) DO NOTHING;

-- Step 3: Add email column to staff_users if not exists
ALTER TABLE staff_users ADD COLUMN IF NOT EXISTS email VARCHAR(255);

-- Step 4: Ensure foreign key constraint on tickets
ALTER TABLE tickets DROP CONSTRAINT IF EXISTS fk_tickets_student;
ALTER TABLE tickets 
ADD CONSTRAINT fk_tickets_student 
FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE;

-- Step 5: Grant necessary permissions
GRANT REFERENCES (id) ON students TO student_role, support_role;
```

### Testing Checklist

**Student ID Validation**:
- [ ] Submit ticket with valid student ID → success
- [ ] Submit ticket with invalid student ID → error message displayed
- [ ] Submit ticket with non-numeric ID → format error
- [ ] Foreign key constraint prevents orphaned tickets

**Self-Registration**:
- [ ] Register as student (no code) → account created
- [ ] Register as support with correct code → account created
- [ ] Register as support with wrong code → error, no account
- [ ] Register as admin with correct code → account created
- [ ] Register as admin with wrong code → error, no account
- [ ] Register with existing username → error message
- [ ] Verification code field hides/shows based on role selection

**Admin Account Creation**:
- [ ] Admin creates student account → success (no code needed)
- [ ] Admin creates support account → success (no code needed)
- [ ] Admin creates admin account → success (no code needed)
- [ ] Non-admin attempts access → denied

**Security**:
- [ ] Rate limiting on registration endpoint
- [ ] Rate limiting on login endpoint
- [ ] CSRF protection on all forms
- [ ] Generic error messages prevent enumeration
- [ ] Audit logs capture all account creation events

### Implementation Priority

1. **Phase 1** (High Priority): Student ID validation in ticket submission
2. **Phase 2** (High Priority): Self-registration with role-based verification
3. **Phase 3** (Medium Priority): Admin panel for account creation
4. **Phase 4** (Medium Priority): Verification code management interface
5. **Phase 5** (Low Priority): Account approval workflow (optional)

### Expected User Flows

**Flow 1: Student Self-Registration + Ticket Submission**
1. Student visits /register
2. Fills form: username, email, password, selects "Student" role
3. No verification code required
4. Account created → redirected to login
5. Logs in with credentials
6. Submits ticket with their student ID
7. System validates ID exists in students table
8. Ticket created successfully

**Flow 2: Support Staff Self-Registration**
1. Support staff visits /register
2. Fills form, selects "Support Staff" role
3. Verification code field appears
4. Enters code obtained from administrator
5. System validates code
6. Account created with support_role privileges
7. Can now submit tickets on behalf of students

**Flow 3: Admin Creates Accounts**
1. Admin logs in
2. Navigates to admin panel
3. Selects "Create Account"
4. Fills form with user details
5. Assigns role (no verification needed)
6. Account created instantly

**Flow 4: Invalid Student ID**
1. User submits ticket with ID "99999"
2. System queries: SELECT id FROM students WHERE id = 99999
3. No result found
4. Error: "Student ID not found. Please verify your ID with administration."
5. Ticket not created

================================================================================
ALTERNATIVE PROMPT VERSIONS
================================================================================

## Prompt Version 1: Simple Student ID Validation Only

### Focus
Implement only student ID validation during ticket submission. No account registration changes.

### Implementation
```python
@app.route('/submit_ticket', methods=['POST'])
@login_required
def submit_ticket():
    student_id = request.form.get('student_id', '').strip()
    issue = request.form.get('issue', '').strip()
    
    if not student_id or not issue:
        return render_template_string(html_template, 
            ticket_message="All fields are required.", results=None)
    
    try:
        student_id = int(student_id)
    except ValueError:
        return render_template_string(html_template, 
            ticket_message="Invalid student ID format.", results=None)
    
    conn = get_db_connection()
    if not conn:
        return render_template_string(html_template, 
            ticket_message="Service temporarily unavailable.", results=None)
    
    try:
        cur = conn.cursor()
        
        # Validate student exists
        cur.execute("SELECT id FROM students WHERE id = %s", (student_id,))
        if not cur.fetchone():
            cur.close()
            return render_template_string(html_template, 
                ticket_message="Student ID not found in administration database.", 
                results=None)
        
        # Continue with existing ticket creation logic
        user_id = session.get('user_id')
        set_trigger_user(cur, user_id)
        
        cur.execute(
            "INSERT INTO tickets (student_id, issue) VALUES (%s, %s) RETURNING id",
            (student_id, issue)
        )
        ticket_id = cur.fetchone()[0]
        
        # Audit logging (existing code)
        audit_payload = {
            "ticket_id": ticket_id,
            "student_id": student_id,
            "issue": issue
        }
        staff_id = int(user_id) if user_id else None
        cur.execute(
            """UPDATE audit_log_ticket SET action = %s, staff_id = COALESCE(%s, staff_id),
               old_data = NULL, new_data = %s
               WHERE ticket_id = %s AND action = 'INSERT'""",
            ('TICKET_CREATE', staff_id, Json(audit_payload), ticket_id)
        )
        
        conn.commit()
        cur.close()
        return render_template_string(html_template, 
            ticket_message="Ticket submitted successfully!", results=None)
            
    except psycopg2.IntegrityError as error:
        conn.rollback()
        return render_template_string(html_template, 
            ticket_message="Unable to submit ticket. Please verify student ID.", 
            results=None)
    except Exception as error:
        conn.rollback()
        print(f"Ticket submission error: {error}")
        return render_template_string(html_template, 
            ticket_message="An error occurred. Please try again.", results=None)
    finally:
        if conn:
            conn.close()
```

### Database Changes
```sql
-- Ensure foreign key exists
ALTER TABLE tickets DROP CONSTRAINT IF EXISTS fk_tickets_student;
ALTER TABLE tickets 
ADD CONSTRAINT fk_tickets_student 
FOREIGN KEY (student_id) REFERENCES students(id);
```

### Pros
- Simple, focused implementation
- Minimal code changes
- Easy to test

### Cons
- Doesn't address account registration requirements
- Limited feature set

================================================================================

## Prompt Version 2: Admin-Only Account Creation

### Focus
All accounts must be created by administrators. No self-registration.

### Implementation
```python
@app.route('/admin/users', methods=['GET'])
@login_required
def admin_manage_users():
    if session.get('role') != 'admin_role':
        return render_template_string(html_template, 
            access_message="Access denied: admin only.")
    
    conn = get_db_connection()
    if not conn:
        return render_template_string(admin_users_template, 
            error="Database connection failed.")
    
    try:
        cur = conn.cursor()
        cur.execute(
            "SELECT id, username, role, email FROM staff_users ORDER BY id"
        )
        users = cur.fetchall()
        cur.close()
        return render_template_string(admin_users_template, users=users)
    finally:
        if conn:
            conn.close()

@app.route('/admin/users/create', methods=['POST'])
@login_required
def admin_create_user():
    if session.get('role') != 'admin_role':
        return render_template_string(html_template, 
            access_message="Access denied: admin only.")
    
    username = request.form.get('username', '').strip()
    password = request.form.get('password', '')
    email = request.form.get('email', '').strip()
    role = normalize_role(request.form.get('role', '').strip())
    
    if not username or not password or not role:
        return redirect(url_for('admin_manage_users') + '?error=missing_fields')
    
    conn = get_db_connection()
    if not conn:
        return redirect(url_for('admin_manage_users') + '?error=db_error')
    
    try:
        cur = conn.cursor()
        
        # Check username uniqueness
        cur.execute("SELECT id FROM staff_users WHERE username = %s", (username,))
        if cur.fetchone():
            cur.close()
            return redirect(url_for('admin_manage_users') + '?error=username_exists')
        
        # Create user
        cur.execute(
            """INSERT INTO staff_users (username, password_hash, role, email)
               VALUES (%s, crypt(%s, gen_salt('bf')), %s, %s)""",
            (username, password, role, email)
        )
        
        # Audit log
        user_id = session.get('user_id')
        set_trigger_user(cur, user_id)
        
        conn.commit()
        cur.close()
        return redirect(url_for('admin_manage_users') + '?success=user_created')
        
    except Exception as e:
        conn.rollback()
        print(f"User creation error: {e}")
        return redirect(url_for('admin_manage_users') + '?error=creation_failed')
    finally:
        if conn:
            conn.close()
```

### Admin Template
```html
admin_users_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Management - Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 p-6">
    <div class="max-w-6xl mx-auto">
        <h1 class="text-3xl font-bold mb-6">User Management</h1>
        
        <section class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Create New User</h2>
            <form method="post" action="/admin/users/create" class="grid grid-cols-2 gap-4">
                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                <input type="text" name="username" placeholder="Username" required
                    class="px-4 py-2 border rounded">
                <input type="email" name="email" placeholder="Email" required
                    class="px-4 py-2 border rounded">
                <input type="password" name="password" placeholder="Password" required
                    class="px-4 py-2 border rounded">
                <select name="role" required class="px-4 py-2 border rounded">
                    <option value="">Select Role</option>
                    <option value="student_role">Student</option>
                    <option value="support_role">Support</option>
                    <option value="admin_role">Admin</option>
                </select>
                <button type="submit" class="col-span-2 bg-blue-600 text-white py-2 rounded">
                    Create User
                </button>
            </form>
        </section>
        
        <section class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Existing Users</h2>
            <table class="w-full">
                <thead>
                    <tr class="border-b">
                        <th class="text-left p-2">ID</th>
                        <th class="text-left p-2">Username</th>
                        <th class="text-left p-2">Email</th>
                        <th class="text-left p-2">Role</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in users %}
                    <tr class="border-b">
                        <td class="p-2">{{ user[0] }}</td>
                        <td class="p-2">{{ user[1] }}</td>
                        <td class="p-2">{{ user[3] or 'N/A' }}</td>
                        <td class="p-2">{{ user[2] }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </section>
    </div>
</body>
</html>
"""
```

### Pros
- Maximum admin control
- No security concerns about self-registration
- Simple workflow

### Cons
- Creates admin workload
- Users can't create accounts independently
- Requires admin availability

================================================================================

## Prompt Version 3: Self-Registration with Approval Workflow

### Focus
Users can register but accounts require admin approval before activation.

### Implementation
```sql
-- Add approval status to staff_users
ALTER TABLE staff_users 
ADD COLUMN IF NOT EXISTS approved BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS approval_requested_at TIMESTAMP,
ADD COLUMN IF NOT EXISTS approved_at TIMESTAMP,
ADD COLUMN IF NOT EXISTS approved_by INTEGER REFERENCES staff_users(id);
```

```python
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'GET':
        return render_template_string(registration_template)
    
    username = request.form.get('username', '').strip()
    password = request.form.get('password', '')
    email = request.form.get('email', '').strip()
    role = normalize_role(request.form.get('role', 'student_role').strip())
    
    conn = get_db_connection()
    if not conn:
        return render_template_string(registration_template, 
            error="Service unavailable.")
    
    try:
        cur = conn.cursor()
        
        # Create account in pending state
        cur.execute(
            """INSERT INTO staff_users 
               (username, password_hash, role, email, approved, approval_requested_at)
               VALUES (%s, crypt(%s, gen_salt('bf')), %s, %s, FALSE, NOW())""",
            (username, password, role, email)
        )
        
        conn.commit()
        cur.close()
        
        return render_template_string(registration_template, 
            success="Account created. Awaiting administrator approval.")
            
    except psycopg2.IntegrityError:
        conn.rollback()
        return render_template_string(registration_template, 
            error="Username already exists.")
    except Exception as e:
        conn.rollback()
        print(f"Registration error: {e}")
        return render_template_string(registration_template, 
            error="Registration failed.")
    finally:
        if conn:
            conn.close()

@app.route('/login', methods=['POST'])
@limiter.limit("5 per minute")
def login():
    username = request.form.get('username', '').strip()
    password = request.form.get('password', '')
    
    conn = get_db_connection()
    if not conn:
        return render_template_string(html_template, 
            login_message="Service unavailable.", results=None)
    
    try:
        cur = conn.cursor()
        cur.execute(
            """SELECT id, username, role, approved 
               FROM staff_users 
               WHERE username = %s 
               AND password_hash = crypt(%s, password_hash)""",
            (username, password)
        )
        user = cur.fetchone()
        cur.close()
        
        if not user:
            return render_template_string(html_template, 
                login_message="Invalid credentials.", results=None)
        
        if not user[3]:  # approved column
            return render_template_string(html_template, 
                login_message="Account pending approval.", results=None)
        
        # Proceed with normal login
        session['logged_in'] = True
        session['user_id'] = user[0]
        session['username'] = user[1]
        session['role'] = normalize_role(user[2])
        session['app_instance_token'] = APP_INSTANCE_TOKEN
        
        return redirect(url_for('index'))
        
    except Exception as e:
        print(f"Login error: {e}")
        return render_template_string(html_template, 
            login_message="An error occurred.", results=None)
    finally:
        if conn:
            conn.close()

@app.route('/admin/approve_users', methods=['GET', 'POST'])
@login_required
def approve_users():
    if session.get('role') != 'admin_role':
        return render_template_string(html_template, 
            access_message="Access denied.")
    
    if request.method == 'POST':
        user_id = request.form.get('user_id')
        action = request.form.get('action')  # approve or reject
        
        conn = get_db_connection()
        if conn:
            try:
                cur = conn.cursor()
                if action == 'approve':
                    cur.execute(
                        """UPDATE staff_users 
                           SET approved = TRUE, 
                               approved_at = NOW(), 
                               approved_by = %s 
                           WHERE id = %s""",
                        (session.get('user_id'), user_id)
                    )
                elif action == 'reject':
                    cur.execute("DELETE FROM staff_users WHERE id = %s", (user_id,))
                
                conn.commit()
                cur.close()
            finally:
                conn.close()
    
    # Show pending users
    conn = get_db_connection()
    pending_users = []
    if conn:
        try:
            cur = conn.cursor()
            cur.execute(
                """SELECT id, username, email, role, approval_requested_at 
                   FROM staff_users 
                   WHERE approved = FALSE 
                   ORDER BY approval_requested_at"""
            )
            pending_users = cur.fetchall()
            cur.close()
        finally:
            conn.close()
    
    return render_template_string(approval_template, users=pending_users)
```

### Pros
- Open registration with admin oversight
- Reduces admin workload initially
- Prevents unauthorized access

### Cons
- Adds complexity
- Delay in account activation
- Requires admin monitoring

================================================================================
COMPARISON MATRIX
================================================================================

Feature                  | Version 1 | Version 2 | Version 3 | Version 4 (Recommended)
------------------------|-----------|-----------|-----------|------------------------
Student ID Validation   | ✓         | ✓         | ✓         | ✓
Self-Registration       | ✗         | ✗         | ✓         | ✓
Admin Account Creation  | ✗         | ✓         | ✓         | ✓
Role Verification Codes | ✗         | ✗         | ✗         | ✓
Approval Workflow       | ✗         | ✗         | ✓         | Optional
Complexity              | Low       | Medium    | High      | Medium-High
Admin Workload          | Low       | High      | Medium    | Low
User Convenience        | N/A       | Low       | Medium    | High
Security Level          | Medium    | High      | High      | Very High
Implementation Time     | 1-2 hours | 3-4 hours | 5-6 hours | 4-5 hours
Maintenance Burden      | Low       | Low       | Medium    | Medium

================================================================================
IMPLEMENTATION RECOMMENDATIONS
================================================================================

**Best Choice: Version 4 (Comprehensive)**
Reasons:
1. Provides maximum flexibility for both admins and users
2. Security through verification codes prevents unauthorized privileged access
3. Students can register freely (low friction)
4. Support/admin roles are protected by verification codes
5. Admin panel provides override capability
6. Scales well with growing user base
7. Balances security, usability, and administrative control

**Alternative: Version 2 (Admin-Only) IF:**
- Small, controlled user base
- High security requirements
- Admin resources are available
- Onboarding can be centralized

**Not Recommended: Version 1**
- Incomplete solution (doesn't address account creation requirement)

**Not Recommended: Version 3**
- Adds unnecessary complexity
- Approval delays frustrate users
- Verification codes (Version 4) provide same security with less friction

================================================================================
FINAL IMPLEMENTATION STEPS (Version 4)
================================================================================

1. Database Setup:
   - Run migration to add role_verification_codes table
   - Add email column to staff_users
   - Set initial verification codes
   - Ensure foreign key constraints

2. Backend Implementation:
   - Add /register route with verification logic
   - Update /submit_ticket with student ID validation
   - Create /admin/create_account route
   - Implement normalize_role function updates

3. Frontend Implementation:
   - Create registration_template with dynamic verification field
   - Add admin account creation template
   - Update navigation to include registration link

4. Security Hardening:
   - Add rate limiting to /register endpoint
   - Implement CSRF protection on all forms
   - Add audit logging for registration attempts
   - Use generic error messages

5. Testing:
   - Test all registration flows
   - Test student ID validation
   - Test role-based access control
   - Security testing (SQLi, XSS, brute force)

6. Documentation:
   - Update README with registration instructions
   - Document verification code distribution process
   - Create admin guide for account management

================================================================================
END OF PROMPT VARIATIONS FILE
================================================================================